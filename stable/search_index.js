var documenterSearchIndex = {"docs":
[{"location":"Internal.html#Internal","page":"Internal","title":"Internal","text":"","category":"section"},{"location":"Internal.html","page":"Internal","title":"Internal","text":"CurrentModule = ModiaResult","category":"page"},{"location":"Internal.html","page":"Internal","title":"Internal","text":"This chapter documents internal functions that are typically only for use of the developers of package ModiaResult.","category":"page"},{"location":"Internal.html","page":"Internal","title":"Internal","text":"info\r\nshowInfo\r\nsignalInfo\r\ngetSignal\r\ngetSignalWithWarning\r\ngetPlotSignal\r\nsignalLength\r\nhasSameSegments\r\nhasDimensionMismatch\r\ngetHeading\r\nprepend!","category":"page"},{"location":"Internal.html#ModiaResult.info","page":"Internal","title":"ModiaResult.info","text":"info(result)\n\nReturn names, units, signal types, values sizes, and element types of the signals that are stored in result as DataFrame table.\n\n\n\n\n\n","category":"function"},{"location":"Internal.html#ModiaResult.showInfo","page":"Internal","title":"ModiaResult.showInfo","text":"showInfo(result)\n\nPrint names, units, signal types, values sizes, and element types of the signals that are stored in result as DataFrame table.\n\n\n\n\n\n","category":"function"},{"location":"Internal.html#ModiaResult.signalInfo","page":"Internal","title":"ModiaResult.signalInfo","text":"(sigType, nTime, sigSize, sigElType, sigUnit) = signalInfo(result, name)\n\nReturn information about a signal, given the name of the signal in result:\n\nsigType::SignalType: ÃŒnterpolation type of signal.\nnTime::Int: Number of signal time points.\nsigSize: size(signal[1][1])\nsigElType: ustrip( eltype(signal[1][1]) ), that is the element type of the signal without unit.\nsigUnit: Unit of signal \n\nIf name is defined, but no signal is available (= nothing, missing or zero length), return nTime=0 and nothing for sigSize, sigElType, sigUnit.\n\n\n\n\n\n","category":"function"},{"location":"Internal.html#ModiaResult.getSignal","page":"Internal","title":"ModiaResult.getSignal","text":"(signal, timeSignal, timeSignalName, signalType, arrayName, arrayIndices, nScalarSignals) = getSignal(result, name)\n\nReturn the signal defined by name::AbstractString as signal::Vector{Matrix{<:Real}}. name may include an array range, such as \"a.b.c[2:3,5]\". In this case arrayName is the name without the array indices, such as \"a.b.c\", arrayIndices is a tuple with the array indices, such as (2:3, 5) and nScalarSignals is the number of scalar signals, such as 3 if arrayIndices = (2:3, 5).  Otherwise arrayName = name, arrayIndices=(), nScalarSignals=1.\n\nIn case the signal is not known or name cannot be interpreted, (nothing, nothing, nothing, nothing, name, (), 0) is returned.\n\nIt is required that the value of the signal at a time instant  has either typeof(value) <: Real or typeof(value) = AbstractArray{Real, N}. The following Real types are currently supported:\n\nconvert(Float64, eltype(value) is supported (for example Float32, Float64, DoubleFloat, Rational, Int32, Int64, Bool).\n\nMeasurements.Measurement{<Type of (1)>}.\nMonteCarloMeasurements.StaticParticles{<Type of (1)>}.\nMonteCarloMeasurements.Particles{<Type of (1)>}.\n\n\n\n\n\n","category":"function"},{"location":"Internal.html#ModiaResult.getSignalWithWarning","page":"Internal","title":"ModiaResult.getSignalWithWarning","text":"(signal, timeSignal, timeSignalName, signalType, arrayName, arrayIndices, nScalarSignals) = \n     getSignalWithWarning(result, name)\n\nCall getSignal(result,name) and print a warning message if signal == nothing\n\n\n\n\n\n","category":"function"},{"location":"Internal.html#ModiaResult.getPlotSignal","page":"Internal","title":"ModiaResult.getPlotSignal","text":"(xsig, xsigLegend, ysig, ysigLegend, ysigType) = getPlotSignal(result, xsigName, ysigName)\n\nGiven the name of the signal used for the x-axis (xsigName::AbstractString) and the name used for the y-axis (ysigName::AbstractString), return\n\nxsig::Vector{Vector{Matrix{Real}}}: the x-axis signal (the matrix has one column)\nysig::Vector{Vector{Matrix{Real}}}: the y-axis signal.\nxsigLegend::AbstractString: the legend of the x-axis signal.\nysigLegend::Vector{AbstractString}: the legend of the y-axis signal as String vector,\nysigType::ModiaResult.SignalType: Type of signal ysig.\n\nxsig[i][j,1] are the x-values at time instant j of segment i\n\nysig[i][j,:] are the (flattened) array values at time instant j of segment i.\n\n\n\n\n\n","category":"function"},{"location":"Internal.html#ModiaResult.signalLength","page":"Internal","title":"ModiaResult.signalLength","text":"signalLength(signal)\n\nReturn the total number of values of signal::Vector{AbstractVector}. If signal[i] is nothing or missing, a length of zero is returned.\n\n\n\n\n\n","category":"function"},{"location":"Internal.html#ModiaResult.hasSameSegments","page":"Internal","title":"ModiaResult.hasSameSegments","text":"hasSameSegments(signal1, signal2)\n\nReturn true, if the lengths of the segments in signal1 and in signal2 are the same.\n\n\n\n\n\n","category":"function"},{"location":"Internal.html#ModiaResult.hasDimensionMismatch","page":"Internal","title":"ModiaResult.hasDimensionMismatch","text":"hasDimensionMismatch(signal, timeSignal, timeSignalName)\n\nPrint a warning message if signalLength(signal) != signalLength(timeSignal) and return true. Otherwise, return false\n\n\n\n\n\n","category":"function"},{"location":"Internal.html#ModiaResult.getHeading","page":"Internal","title":"ModiaResult.getHeading","text":"getHeading(result, heading)\n\nReturn heading if no empty string. Otherwise, return defaultHeading(result).\n\n\n\n\n\n","category":"function"},{"location":"Internal.html#ModiaResult.prepend!","page":"Internal","title":"ModiaResult.prepend!","text":"prepend!(prefix, signalLegend)\n\nAdd prefix string in front of every element of the signalLegend string-Vector.\n\n\n\n\n\n","category":"function"},{"location":"AbstractInterface.html#Abstract-Interface","page":"Abstract Interface","title":"Abstract Interface","text":"","category":"section"},{"location":"AbstractInterface.html","page":"Abstract Interface","title":"Abstract Interface","text":"CurrentModule = ModiaResult","category":"page"},{"location":"AbstractInterface.html","page":"Abstract Interface","title":"Abstract Interface","text":"This chapter documents the abstract interface to access a result data structure.","category":"page"},{"location":"AbstractInterface.html","page":"Abstract Interface","title":"Abstract Interface","text":"Functions Description\nSignalType Enumeration defining the supported signal types.\nrawSignal Returns signal data given the signal name (required).\nnames Return all signal names (required).\ntimeSignalName Return the name of the time signal (required).\nhasOneTimeSignal Return true if one time signal present (required).\nhasSignal Inquire whether a signal name is known (optional).\ndefaultHeading Return default heading as string (optional).","category":"page"},{"location":"AbstractInterface.html","page":"Abstract Interface","title":"Abstract Interface","text":"SignalType\r\nrawSignal\r\nnames\r\ntimeSignalName\r\nhasOneTimeSignal\r\nhasSignal\r\ndefaultHeading","category":"page"},{"location":"AbstractInterface.html#ModiaResult.SignalType","page":"Abstract Interface","title":"ModiaResult.SignalType","text":"@enum ModiaResult.SignalType\n\nDefines the type of the signal. Supported values:\n\nModiaResult.TimeSignal: Time signal (= independent variable).\nModiaResult.Continuous: Piece-wise continuous signal (typically linearly interpolated).\nModiaResult.Clocked: Clocked signal (values are only defined at the corresponding Time signal time instants and have  no value in between; the latter might be signaled by piece-wise constant   dotted lines).   \n\n\n\n\n\n","category":"type"},{"location":"AbstractInterface.html#ModiaResult.rawSignal","page":"Abstract Interface","title":"ModiaResult.rawSignal","text":"(timeSignal, signal, signalType) = ModiaResult.rawSignal(result, name)\n\nReturns \n\nthe result time series signal::Vector{AbstractVector}} of name::AbstractString (an element of signal[i][j] is either a Real number (<: Real) or an  array of Real numbers (eltype(signal[i][j]) <: Real),\n\nthe corresponding timeSignal::Vector{Vector{Real}} of the independent variable,\nthe information signalType::SignalType that defines how the signal shall be  interpolated. \n\nNote, an error shall be raised, if name is not known.\n\nResult signals consist of one or more segments. signal[i][j] is the value of  the signal at time instant timeSignal[i][j] in result segment i. timeSignal[i][:] must have monotonically increasing values.\n\nIf the signal is a constant with value value, return ([[value, value]], [[t_min, t_max]], timeSignalName, Continuous).\n\nIf the signal is the time signal, return  (timeSignal, timeSignal, timeSignalName, TimeSignal).  The timeSignal might be a dummy vector consisting of the first and last time point in the result (if different timeSignals are present for different signals or if the signal is constant).\n\nsignal and timeSignal may have units from package Unitful.\n\n\n\n\n\n","category":"function"},{"location":"AbstractInterface.html#ModiaResult.names","page":"Abstract Interface","title":"ModiaResult.names","text":"ModiaResult.names(result)\n\nReturn a string vector of the signal names that are present in result.\n\n\n\n\n\n","category":"function"},{"location":"AbstractInterface.html#ModiaResult.timeSignalName","page":"Abstract Interface","title":"ModiaResult.timeSignalName","text":"ModiaResult.timeSignalName(result)\n\nReturn the name of the time signal (default: \"time\").\n\n\n\n\n\n","category":"function"},{"location":"AbstractInterface.html#ModiaResult.hasOneTimeSignal","page":"Abstract Interface","title":"ModiaResult.hasOneTimeSignal","text":"ModiaResult.hasOneTimeSignal(result)\n\nReturn true if result has one time signal. Return false, if result has two or more time signals.\n\n\n\n\n\n","category":"function"},{"location":"AbstractInterface.html#ModiaResult.hasSignal","page":"Abstract Interface","title":"ModiaResult.hasSignal","text":"ModiaResult.hasSignal(result, name)\n\nReturns true if signal name::AbstractString is available in result.\n\n\n\n\n\n","category":"function"},{"location":"AbstractInterface.html#ModiaResult.defaultHeading","page":"Abstract Interface","title":"ModiaResult.defaultHeading","text":"ModiaResult.defaultHeading(result)\n\nReturn default heading of result as a string  (can be used as default heading for a plot).\n\n\n\n\n\n","category":"function"},{"location":"GettingStarted.html#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"GettingStarted.html","page":"Getting Started","title":"Getting Started","text":"Note, many examples are available at $(ModiaResult.path)/test/*.jl.","category":"page"},{"location":"GettingStarted.html#Simple-plot","page":"Getting Started","title":"Simple plot","text":"","category":"section"},{"location":"GettingStarted.html","page":"Getting Started","title":"Getting Started","text":"The following example defines a simple line plot of a sine wave:","category":"page"},{"location":"GettingStarted.html","page":"Getting Started","title":"Getting Started","text":"import ModiaResult\r\n\r\n# Define plotting software globally\r\nModiaResult.activate(\"GLMakie\") # or ENV[\"MODIA_PLOT\"] = \"GLMakie\"\r\n\r\n# Define result data structure\r\nt = range(0.0, stop=10.0, length=100)\r\nresult = Dict(\"time\" => t, \"phi\" => sin.(t))\r\n\r\n# Generate line plot\r\nModiaResult.@usingModiaPlot  # = \"using ModiaPlot_GLMakie\"\r\nplot(result, \"phi\", heading = \"Sine(time)\")","category":"page"},{"location":"GettingStarted.html","page":"Getting Started","title":"Getting Started","text":"Executing this code results in the following plot:","category":"page"},{"location":"GettingStarted.html","page":"Getting Started","title":"Getting Started","text":"(Image: SinePlot)","category":"page"},{"location":"GettingStarted.html#Plot-with-segmented-time-axes","page":"Getting Started","title":"Plot with segmented time axes","text":"","category":"section"},{"location":"GettingStarted.html","page":"Getting Started","title":"Getting Started","text":"A more complex example is shown in the next definition, where the signals have units, are scalars and vectors, have different time axes and are not always defined over the complete time range.","category":"page"},{"location":"GettingStarted.html","page":"Getting Started","title":"Getting Started","text":"import ModiaResult\r\nusing  Unitful\r\n\r\n# Define plotting software globally\r\nModiaResult.activate(\"PyPlot\") # or ENV[\"MODIA_PLOT\"] = \"PyPlot\"\r\n\r\n# Define result data structure\r\nt0 = ([0.0, 15.0], [0.0, 15.0], ModiaResult.TimeSignal)\r\nt1 = 0.0  : 0.1 : 15.0\r\nt2 = 0.0  : 0.1 : 3.0\r\nt3 = 5.0  : 0.3 : 9.5\r\nt4 = 11.0 : 0.1 : 15.0\r\n\r\nsigA1 = 0.9*sin.(t2)u\"m\"\r\nsigA2 =     cos.(t3)u\"m\"\r\nsigA3 = 1.1*sin.(t4)u\"m\"\r\nR2    = [[0.4 * cos(t), 0.5 * sin(t), 0.3 * cos(t)] for t in t2]u\"m\"\r\nR4    = [[0.2 * cos(t), 0.3 * sin(t), 0.2 * cos(t)] for t in t4]u\"m\"\r\n\r\nsigA  = ([t2,t3,t4], [sigA1,sigA2,sigA3 ], ModiaResult.Continuous)\r\nsigB  = ([t1]      , [0.7*sin.(t1)u\"m/s\"], ModiaResult.Continuous)\r\nsigC  = ([t3]      , [sin.(t3)u\"N*m\"]    , ModiaResult.Clocked)\r\nr     = ([t2,t4]   , [R2,R4]             , ModiaResult.Continuous)\r\n    \r\nresult = ModiaResult.ResultDict(\"time\" => t0, \r\n                                \"sigA\" => sigA,\r\n                                \"sigB\" => sigB,\r\n                                \"sigC\" => sigC,\r\n                                \"r\"    => r,\r\n                                defaultHeading = \"Segmented signals\",\r\n                                hasOneTimeSignal = false) \r\n                        \r\n# Generate line plots                     \r\nModiaResult.@usingModiaPlot   # = \"using ModiaPlot_PyPlot\"\r\nplot(result, [(\"sigA\", \"sigB\", \"sigC\"), \"r[2:3]\"])","category":"page"},{"location":"GettingStarted.html","page":"Getting Started","title":"Getting Started","text":"Executing this code results in the following plot:","category":"page"},{"location":"GettingStarted.html","page":"Getting Started","title":"Getting Started","text":"(Image: SegmentedSignalsPlot)","category":"page"},{"location":"GettingStarted.html#SilentNoPlot-in-runtests","page":"Getting Started","title":"SilentNoPlot in runtests","text":"","category":"section"},{"location":"GettingStarted.html","page":"Getting Started","title":"Getting Started","text":"Typically, runtests.jl of a simulation package should utilize SilentNoPlot to perform all  tests without using a plot package:","category":"page"},{"location":"GettingStarted.html","page":"Getting Started","title":"Getting Started","text":"# File runtests.jl\r\nimport ModiaResult\r\nModiaResult.activate(\"SilentNoPlot\") # stores current plot package on a stack\r\n\r\n< run all tests >\r\n\r\nModiaResult.activatePrevious() # retrieves previous plot package from stack","category":"page"},{"location":"Functions.html#Functions","page":"Functions","title":"Functions","text":"","category":"section"},{"location":"Functions.html","page":"Functions","title":"Functions","text":"CurrentModule = ModiaPlot_PyPlot","category":"page"},{"location":"Functions.html","page":"Functions","title":"Functions","text":"This chapter documents the functions that a user of this package typically utilizes.","category":"page"},{"location":"Functions.html","page":"Functions","title":"Functions","text":"Functions Description\nModiaResult.ResultDict Return a new instance of a ResultDict dictionary.\nModiaResult.activate Define the plot package to be used.\nModiaResult.activatePrevious Activate previous plot package\nModiaResult.activated Return name of activated plot package\nModiaResult.@usingModiaPlot expands into using ModiaPlot_<PlotPackageName>\nplot Plot simulation results in multiple diagrams/figures.\nresultInfo Return info about the result as DataFrame table\nshowResultInfo Print info of the result on stdout.\nsaveFigure Save figure in different formats on file.\ncloseFigure Close one figure\ncloseAllFigures Close all figures\nshowFigure Show figure in window (only GLMakie, WGLMakie)","category":"page"},{"location":"Functions.html#Functions-of-ModiaResult","page":"Functions","title":"Functions of ModiaResult","text":"","category":"section"},{"location":"Functions.html","page":"Functions","title":"Functions","text":"ModiaResult.ResultDict\r\nModiaResult.activate\r\nModiaResult.activatePrevious\r\nModiaResult.activated\r\nModiaResult.@usingModiaPlot","category":"page"},{"location":"Functions.html#ModiaResult.ResultDict","page":"Functions","title":"ModiaResult.ResultDict","text":"ResultDict(args...; defaultHeading=\"\", hasOneTimeSignal=true)\n\nReturn a new ResultDict dictionary (is based on DataStructures.OrderedDict).\n\nA key of the dictionary is a String. Key \"time\" characterizes the independent variable.\nA value of the dictionary is a tuple (timeSignal, signal, signalType) where timeSignal::Vector{AbstractVector}, signal::Vector{AbstractVector} and signalType::ModiaResult.SignalType.signal[i][j]is the signalValue at time instanttimeSignal[i][j]in segmenti`.\n\nExample\n\nusing ModiaResult\n\ntime0 = [0.0, 7.0]\nt     = ([time0], [time0], ModiaResult.TimeSignal)\n\ntime1 = 0.0 : 0.1  : 2.0\ntime2 = 3.0 : 0.01 : 3.5\ntime3 = 5.0 : 0.1  : 7.0\nsigA1 = sin.(time1)u\"m\"\nsigA2 = cos.(time2)u\"m\"\nsigA3 = sin.(time3)u\"m\"\nsigA  = ([time1, time2, time3], \n         [sigA1, sigA2, sigA3 ], \n         ModiaResult.SignalType)\nsigB  = ([time2], [sin.(time2)], ModiaResult.SignalType)\nsigC  = ([time3], [sin.(time3)], ModiaResult.Clocked)    \n    \nresult = ModiaResult.ResultDict(\"time\" => t, \n                                \"sigA\" => sigA,\n                                \"sigB\" => sigB,\n                                \"sigC\" => sigC,\n                                defaultHeading = \"Three test signals\",\n                                hasOneTimeSignal = false)\nshowInfo(result)\n\n\n\n\n\n","category":"type"},{"location":"Functions.html#ModiaResult.activate","page":"Functions","title":"ModiaResult.activate","text":"activate(plotPackage::String)\n\nDefine the ModiaPlot package that shall be used by command ModiaResult.@usingModiaPlot. If a ModiaPlot package is already defined, save it on an internal stack (can be reactivated with activatePrevious().\n\nPossible values for plotPackage:\n\n\"GLMakie\"\n\"WGLMakie\"\n\"CairoMakie\"\n\"PyPlot\"\n\"NoPlot\"\n\"SilentNoPlot\"\n\nExample\n\nimport ModiaResult\n\nModiaResult.activate(\"GLMakie\")\n\nmodule MyTest\n    ModiaResult.@usingModiaPlot\n\n    t = range(0.0, stop=10.0, length=100)\n    result = Dict{String,Any}(\"time\" => t, \"phi\" => sin.(t))\n\n    plot(result, \"phi\")  # use GLMakie for the rendering\nend\n\n\n\n\n\n","category":"function"},{"location":"Functions.html#ModiaResult.activatePrevious","page":"Functions","title":"ModiaResult.activatePrevious","text":"activatePrevious()\n\nPop the last saved ModiaPlot package from an internal stack and call activate(<popped ModiaPlot package>).\n\n\n\n\n\n","category":"function"},{"location":"Functions.html#ModiaResult.activated","page":"Functions","title":"ModiaResult.activated","text":"activated()\n\nReturn the name of the activated plot package as a string (e.g. return \"GLMakie\" or \"PyPlot\") or \"\", if no PlotPackage is defined\n\n\n\n\n\n","category":"function"},{"location":"Functions.html#ModiaResult.@usingModiaPlot","page":"Functions","title":"ModiaResult.@usingModiaPlot","text":"@usingModiaPlot()\n\nExecute using XXX, where XXX is the ModiaPlot package that was activated with activate(plotPackage).\n\n\n\n\n\n","category":"macro"},{"location":"Functions.html#Functions-exported-by-plot-package","page":"Functions","title":"Functions exported by plot package","text":"","category":"section"},{"location":"Functions.html","page":"Functions","title":"Functions","text":"The following functions are available after","category":"page"},{"location":"Functions.html","page":"Functions","title":"Functions","text":"ModiaResult.@usingModiaPlot","category":"page"},{"location":"Functions.html","page":"Functions","title":"Functions","text":"has been executed. The documentation below was generated with ModiaPlot_PyPlot.","category":"page"},{"location":"Functions.html","page":"Functions","title":"Functions","text":"plot\r\nresultInfo\r\nshowResultInfo\r\nsaveFigure\r\ncloseFigure\r\ncloseAllFigures\r\nshowFigure","category":"page"},{"location":"Functions.html#ModiaPlot_PyPlot.plot","page":"Functions","title":"ModiaPlot_PyPlot.plot","text":"plot(result, names; \n     heading = \"\", grid = true, xAxis = \"time\",\n     figure = 1, prefix = \"\", reuse = false, maxLegend = 10,\n     minXaxisTickLabels = false,\n     MonteCarloAsArea = true)\n\nGenerate line plots of the signals of the result data structure that are identified with the names keys using the plot package defined with ModiaResult.@activate(xxx). Possible values for xxx: \"GLMakie\", \"WGLMakie\", \"CairoMakie\", \"PyPlot\", \"NoPlot\", \"SilentNoPlot\").\n\nresult is any data structures that supports the abstract interface of ModiaResult.  Currently these are:\n\nresult::ModiaResult.ResultDict\nresult::AbstractDict{String,T}\nresult::DataFrames.DataFrame\nresult supports the Tables.jl interface with Tables.columnaccess(result) = true.\n\nArgument names defines the diagrams to be drawn and the result data to be included in the respective diagram:\n\nIf names is a String, generate one diagram with one time series of the variable with key names.\nIf names is a Tuple of Strings, generate one diagram with the time series of the variables with the keys given in the tuple.\nIf names is a Vector or a Matrix of Strings and/or Tuples,  generate a vector or matrix of diagrams.\n\nNote, the names (and their units, if available in the result) are automatically used as legends in the respective diagram.\n\nA signal variable identified by a String key can be a scalar of type <:Number or an array of element type <:Number. A signal is defined by a vector of time values, a corresponding vector of signal values, and the signal type (continuous or clocked).\n\nNote, before passing data to the plot package, it is converted to Float64. This allows to, for example, also plot rational numbers, even if not supported by the plot package. Measurements.Measurement{xxx}  and MonteCarloMeasurements is specially handled.\n\nOptional Arguments\n\nheading::AbstractString: Optional heading above the diagram.\ngrid::Bool: = true, to display a grid.\nxAxis::AbstractString: Name of x-axis.\nfigure::Int: Integer identifier of the window in which the diagrams shall be drawn.\nprefix::AbstractString: String that is appended in front of every legend label  (useful especially if reuse=true).\nreuse::Bool: If figure already exists and reuse=false, clear the figure before adding the plot.  Otherwise, include the plot in the existing figure without removing the curves present in the figure.  reuse = true is ignored for \"WGLMakie\" (because not supported).\nmaxLegend::Int: If the number of legend entries in one plot command > maxLegend,  the legend is suppressed. All curves have still their names as labels. In PyPlot, the curves can be inspected by  their names by clicking in the toolbar of the plot on button Edit axis, curve ..  and then on Curves.\nminXaxisTickLabels::Bool: = true, if xaxis tick labels shall be removed in a vector or array of plots, if not the last row (useful when including plots in a document). = false, x axis tick labels are always shown (useful when interactively zooming into a plot).\nMonteCarloAsArea::Bool: = true, if MonteCarloMeasurements values are shown with the mean value and the area between the minimum and the maximum value of all particles. = false, if all particles of MonteCarloMeasurements values are shown (e.g. if a value has 2000 particles, then 2000 curves are shown in the diagram).\n\nExamples\n\nimport ModiaResult\nusing  Unitful\n\n# Generate \"using xxx\" statement \n# (where \"xxx\" is from a previous ModiaResult.activate(\"xxx\"))\nModiaResult.@usingModiaPlot\n\n# Construct result data\nt = range(0.0, stop=10.0, length=100);\nresult = Dict{String,Any}();\nresult[\"time\"] = t*u\"s\";\nresult[\"phi\"]  = sin.(t)*u\"rad\";\nresult[\"w\"]    = cos.(t)*u\"rad/s\";\nresult[\"a\"]    = 1.2*sin.(t)*u\"rad/s^2\";\nresult[\"r\"]    = hcat(0.4 * cos.(t), 0.5 * sin.(t), 0.3*cos.(t))*u\"m\";\n\n# 1 signal in one diagram (legend = \"phi [rad]\")\nplot(result, \"phi\")\n\n# 3 signals in one diagram\nplot(result, (\"phi\", \"w\", \"a\"), figure=2)\n\n# 3 diagrams in form of a vector (every diagram has one signal)\nplot(result, [\"phi\", \"w\", \"r\"], figure=3)\n\n# 4 diagrams in form of a matrix (every diagram has one signal)\nplot(result, [\"phi\" \"w\";\n              \"a\"   \"r[2]\" ], figure=4)\n\n# 2 diagrams in form of a vector\nplot(result, [ (\"phi\", \"w\"), (\"a\") ], figure=5)\n\n# 4 diagrams in form of a matrix\nplot(result, [ (\"phi\",)           (\"phi\", \"w\");\n               (\"phi\", \"w\", \"a\")  (\"r[2:3]\",)     ],figure=6)\n\n# Plot w=f(phi) in one diagram\nplot(result, \"w\", xAxis=\"phi\", figure=7)\n\n# Append signal of the next simulation run to figure=1\n# (legend = \"Sim 2: phi [rad]\")\nresult[\"phi\"] = 0.5*result[\"phi\"];\nplot(result, \"phi\", prefix=\"Sim 2: \", reuse=true)\n\nExample of a matrix of plots:\n\n(Image: Matrix of plots)\n\n\n\n\n\n","category":"function"},{"location":"Functions.html#ModiaPlot_PyPlot.resultInfo","page":"Functions","title":"ModiaPlot_PyPlot.resultInfo","text":"resultInfo(result)\n\nReturn information about the result as DataFrames.DataFrame object with columns:\n\nname::String, unit::String, nTime::String, signalType::String, valueSize::String, eltype::String\n\n\n\n\n\n","category":"function"},{"location":"Functions.html#ModiaPlot_PyPlot.showResultInfo","page":"Functions","title":"ModiaPlot_PyPlot.showResultInfo","text":"showResultInfo(result)\n\nDisplay info about result.\n\nExample\n\nusing ModiaResult\nusing Unitful\nModiaResult.@usingModiaPlot\n\nt = range(0.0, stop=10.0, length=100)\nresult = OrderedDict{String,Any}(\"time\"=> t*u\"s\", \"phi\" => sin.(t)*u\"rad\")\nshowResultInfo(result)\n\n# Gives output:\n # â”‚ name  unit  nTime  signalType  valueSize  eltype  \nâ”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n 1 â”‚ time  s     100    TimeSignal  ()         Float64\n 2 â”‚ phi   rad   100    Continuous  ()         Float64\n\n\n\n\n\n","category":"function"},{"location":"Functions.html#ModiaPlot_PyPlot.saveFigure","page":"Functions","title":"ModiaPlot_PyPlot.saveFigure","text":"saveFigure(figure, file; kwargs...)\n\nSave figure on file. The file extension defines the image format (for example *.png).\n\nPlot package Supported file extensions\nGLMakie png, jpg, bmp\nWGLMakie png\nCairoMakie png, pdf, svg, eps\nPyPlot depends on backend (png, pdf, jpg, tiff, svg, ps, eps)\nNoPlot Call is ignored\n\nKeyword arguments\n\nresolution: (width::Int, height::Int) of the scene in dimensionless  units (equivalent to px for GLMakie and WGLMakie).\n\nExample\n\nimport ModiaResult\nModiaResult.@usingModiaPlot\n...\n\nplot(..., figure=1)\nplot(..., figure=2)\n\nsaveFigure(1, \"plot.png\")   # save in png-format\nsaveFigure(2, \"plot.svg\")   # save in svg-format\n\n\n\n\n\n","category":"function"},{"location":"Functions.html#ModiaPlot_PyPlot.closeFigure","page":"Functions","title":"ModiaPlot_PyPlot.closeFigure","text":"closeFigure(figure)\n\nClose figure.\n\n\n\n\n\n","category":"function"},{"location":"Functions.html#ModiaPlot_PyPlot.closeAllFigures","page":"Functions","title":"ModiaPlot_PyPlot.closeAllFigures","text":"closeAllFigures()\n\nClose all figures.\n\n\n\n\n\n","category":"function"},{"location":"Functions.html#ModiaPlot_PyPlot.showFigure","page":"Functions","title":"ModiaPlot_PyPlot.showFigure","text":"showFigure(figure)\n\nPlot package Effect\nGLMakie Show figure in the single window.\nWGLMakie Show figure in the single window.\nCairoMakie Call is ignored\nPyPlot Call is ignored\nNoPlot Call is ignored\n\nExample\n\nimport ModiaResult\nModiaResult.@usingModiaPlot\n...\nplot(..., figure=1)\nplot(..., figure=2)\nplot(..., figure=3)\n\nshowFigure(2)\nshowFigure(1)\n\n\n\n\n\n","category":"function"},{"location":"index.html#ModiaResult-Documentation","page":"Home","title":"ModiaResult Documentation","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Package ModiaResult defines  an abstract interface for simulation results and provides overloaded methods for:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Dictionaries with String keys,","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"DataFrame tables, ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Tables (for example CSV), and","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"ModiaResult.ResultDict (special dictionary with all features of the interface). ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Additionally, operations on simulation results are provided, especially to produce line plots in a convenient way based on ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"GLMakie (interactive plots in an OpenGL window),\nWGLMakie (interactive plots in a browser window),\nCairoMakie (static plots on file with publication quality),\nPyPlot (plots with Matplotlib from Python), \nNoPlot (= all plot calls are ignored; NoPlot is a module in ModiaResult), or\nSilentNoPlot (= NoPlot without messages; SilentNoPlot is a module in ModiaResult).","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"More details:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Getting Started\nFunctions\nAbstract Interface\nInternal","category":"page"},{"location":"index.html#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"ModiaResult is registered. The accompanying plot packages are currently being registered. During this phase, the packages are installed as (Julia >= 1.5 is required):","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"julia> ]add ModiaResult,\r\n        add https://github.com/ModiaSim/ModiaPlot_GLMakie.jl\r\n        add https://github.com/ModiaSim/ModiaPlot_WGLMakie.jl\r\n        add https://github.com/ModiaSim/ModiaPlot_CairoMakie.jl\r\n        add https://github.com/ModiaSim/ModiaPlot_PyPlot.jl","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Once all packages are registered, install the packages with:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"julia> ]add ModiaResult\r\n        add ModiaPlot_GLMakie\r\n        add ModiaPlot_WGLMakie\r\n        add ModiaPlot_CairoMakie\r\n        add ModiaPlot_PyPlot","category":"page"},{"location":"index.html#Installation-of-PyPlot.jl","page":"Home","title":"Installation of PyPlot.jl","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"ModiaPlot_PyPlot.jl uses PyPlot.jl which in turn uses Python.  Therefore a Python installation is needed. Installation  might give problems in some cases. Here are some hints what to do (you may also consult the documentation of PyPlot.jl).","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Before installing ModiaPlot_PyPlot.jl make sure that PyPlot.jl is working:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"]add PyPlot\r\nusing PyPlot\r\nt = [0,1,2,3,4]\r\nplot(t,2*t)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"If the commands above give a plot window. Everything is fine.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"If you get errors or no plot window appears or Julia crashes,  try to first install a standard Python installation from Julia:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"# Start a new Julia session\r\nENV[\"PYTHON\"] = \"\"    # Let Julia install Python\r\n]build PyCall\r\n# Exit Juila\r\n\r\n# Start a new Julia session\r\n]add PyPlot\r\nusing PyPlot\r\nt = [0,1,2,3,4]\r\nplot(t,2*t)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"If the above does not work, or you want to use another Python distribution, you might utilize the following approach.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Install a Python 3.x distribution that contains Matplotlib.\nRecommended: Anaconda distribution.\nAdvantage: very robust;\nDisadvantage: > 3 GByte memory needed;\nModiaPlot_PyPlot is based on the Python 3.x version of Matplotlib where some keywords are different to the Python 2.x version.\nOn Windows 10, either provide a julia_start.bat file with the following content (and add <path-to-julia-installation>\\bin to the path environment variable):\ncall <path-to-Anaconda3>\\Anaconda3\\Scripts\\activate.bat\r\njulia\nand always start julia by calling julia_start,\nor you could add the following directories to the path environment variable:\n<path-to-Anaconda3>\\Anaconda3\r\n<path-to-Anaconda3>\\Anaconda3\\Library\\mingw-w64\\bin\r\n<path-to-Anaconda3>\\Anaconda3\\Library\\usr\\bin\r\n<path-to-Anaconda3>\\Anaconda3\\Library\\bin\r\n<path-to-Anaconda3>\\Anaconda3\\Scripts\r\n<path-to-Anaconda3>\\Anaconda3\\bin\r\n<path-to-Anaconda3>\\Anaconda3\\condabin\nand start julia by calling julia","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Include the path to the Python executable in your startup file\n(<path-to-user>/.julia/config/startup.jl):\n ENV[\"PYTHON\"] = \"<path-above-Anaconda3>/Anaconda3/python.exe\".","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Start Julia, give the command ENV[\"PYTHON\"] in the REPL, and check whether the path is correct (if you made a typo in the startup file, Julia might use another Python executable and PyPlot might crash Julia).","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"If you have used a different Python installation before, execute the command ]build PyCall (or using Pkg; Pkg.build(\"PyCall\"), exit Julia and start Julia again.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Install PyPlot via ]add PyPlot (or using Pkg; Pkg.add(\"PyPlot\"))","category":"page"},{"location":"index.html#Release-Notes","page":"Home","title":"Release Notes","text":"","category":"section"},{"location":"index.html#Version-0.2.2","page":"Home","title":"Version 0.2.2","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Overloaded AstractDicts generalized from AbstractDict{String,T} where {T} to\nAbstractDict{T1,T2} where {T1<:AbstractString,T2}.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Bug fixed.","category":"page"},{"location":"index.html#Version-0.2.1","page":"Home","title":"Version 0.2.1","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Bug fixed: <: Vector changed to <: AbstractVector","category":"page"},{"location":"index.html#Version-0.2.0","page":"Home","title":"Version 0.2.0","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Abstract Interface slightly redesigned (therefore 0.2.0 is not backwards compatible to 0.1.0).","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Modules NoPlot and SilentNoPlot added as sub-modules of ModiaResult. These modules are activated if plot package \"NoPlot\" or \"SilentNoPlot\" are selected.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Content of directory srcplot moved into src. Afterwards srcplot was removed.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Directory test_plot merged into test (and then removed).","category":"page"},{"location":"index.html#Version-0.1.0","page":"Home","title":"Version 0.1.0","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Initial version (based on the result plotting developed for ModiaMath).","category":"page"},{"location":"index.html#Main-developer","page":"Home","title":"Main developer","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Martin Otter, DLR - Institute of System Dynamics and Control","category":"page"}]
}
