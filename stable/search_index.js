var documenterSearchIndex = {"docs":
[{"location":"Internal.html#Internal","page":"Internal","title":"Internal","text":"","category":"section"},{"location":"Internal.html","page":"Internal","title":"Internal","text":"CurrentModule = ModiaResult","category":"page"},{"location":"Internal.html","page":"Internal","title":"Internal","text":"This chapter documents internal functions that are typically only for use of the developers of package ModiaResult.","category":"page"},{"location":"Internal.html","page":"Internal","title":"Internal","text":"getSignalDetailsWithWarning\r\nsignalLength\r\nhasSameSegments\r\nhasDimensionMismatch\r\nprepend!","category":"page"},{"location":"Internal.html#ModiaResult.getSignalDetailsWithWarning","page":"Internal","title":"ModiaResult.getSignalDetailsWithWarning","text":"(signal, timeSignal, timeSignalName, signalType, arrayName, arrayIndices, nScalarSignals) = \n     getSignalWithWarning(result, name)\n\nCall getSignal(result,name) and print a warning message if signal == nothing\n\n\n\n\n\n","category":"function"},{"location":"Internal.html#ModiaResult.signalLength","page":"Internal","title":"ModiaResult.signalLength","text":"signalLength(signal)\n\nReturn the total number of values of signal::Vector{AbstractVector}. If signal[i] is nothing or missing, a length of zero is returned.\n\n\n\n\n\n","category":"function"},{"location":"Internal.html#ModiaResult.hasSameSegments","page":"Internal","title":"ModiaResult.hasSameSegments","text":"hasSameSegments(signal1, signal2)\n\nReturn true, if the lengths of the segments in signal1 and in signal2 are the same.\n\n\n\n\n\n","category":"function"},{"location":"Internal.html#ModiaResult.hasDimensionMismatch","page":"Internal","title":"ModiaResult.hasDimensionMismatch","text":"hasDimensionMismatch(signal, timeSignal, timeSignalName)\n\nPrint a warning message if signalLength(signal) != signalLength(timeSignal) and return true. Otherwise, return false\n\n\n\n\n\n","category":"function"},{"location":"Internal.html#ModiaResult.prepend!","page":"Internal","title":"ModiaResult.prepend!","text":"prepend!(prefix, signalLegend)\n\nAdd prefix string in front of every element of the signalLegend string-Vector.\n\n\n\n\n\n","category":"function"},{"location":"AbstractInterface.html#Abstract-Interface","page":"Abstract Interface","title":"Abstract Interface","text":"","category":"section"},{"location":"AbstractInterface.html","page":"Abstract Interface","title":"Abstract Interface","text":"CurrentModule = ModiaResult","category":"page"},{"location":"AbstractInterface.html","page":"Abstract Interface","title":"Abstract Interface","text":"This chapter documents the abstract interface to access a result data structure.","category":"page"},{"location":"AbstractInterface.html","page":"Abstract Interface","title":"Abstract Interface","text":"Functions Description\nSignalType Predefined enumeration defining the supported signal types.\nrawSignal Return raw signal data given the signal name (required).\nsignalNames Return all signal names (required).\ntimeSignalName Return the name of the time signal (required).\nhasOneTimeSignal Return true if one time signal present (required).\ngetSignalDetails Return details of signal data (optional).\nhasSignal Return true if signal name is known (optional).\ndefaultHeading Return default heading as string (optional).","category":"page"},{"location":"AbstractInterface.html#Predefined-enumeration","page":"Abstract Interface","title":"Predefined enumeration","text":"","category":"section"},{"location":"AbstractInterface.html","page":"Abstract Interface","title":"Abstract Interface","text":"SignalType","category":"page"},{"location":"AbstractInterface.html#ModiaResult.SignalType","page":"Abstract Interface","title":"ModiaResult.SignalType","text":"@enum ModiaResult.SignalType\n\nDefines the type of the signal. Supported values:\n\nModiaResult.Independent: Independent variable (usually the time signal).\nModiaResult.Continuous: Piece-wise continuous signal (typically linearly interpolated).\nModiaResult.Clocked: Clocked signal (values are only defined at the corresponding Time signal time instants and have  no value in between; the latter might be signaled by piece-wise constant   dotted lines).   \n\n\n\n\n\n","category":"type"},{"location":"AbstractInterface.html#Required-functions","page":"Abstract Interface","title":"Required functions","text":"","category":"section"},{"location":"AbstractInterface.html","page":"Abstract Interface","title":"Abstract Interface","text":"The following functions must be defined for a new result data structure.","category":"page"},{"location":"AbstractInterface.html","page":"Abstract Interface","title":"Abstract Interface","text":"rawSignal\r\nsignalNames\r\ntimeSignalName\r\nhasOneTimeSignal","category":"page"},{"location":"AbstractInterface.html#ModiaResult.rawSignal","page":"Abstract Interface","title":"ModiaResult.rawSignal","text":"(timeSignal, signal, signalType) = ModiaResult.rawSignal(result, name)\n\nGiven the result data structure result and a variable name::AbstractString, return the result values of the independent variable (= timeSignal), the  corresponding result values of the variable (= signal) and the type of the signal signalType::SignalType). Note, an error shall be raised,  if name is not known.\n\nThe following figure sketches the returned timeSignal and signal data structures:\n\n(Image: SignalDefinition)\n\nOther signal types might be mapped to this basic signal type by introducing views.\n\nDetails of the return arguments\n\ntimeSignal::Vector{Vector{T1}}: A result consists of one or more segments. timeSignal[i][j] is the value of time instant j in segment i. timeSignal[i][:] must have monotonically increasing values and type T1<:Real must be a subtype of Real for which a conversion to AbstractFloat is defined. For example, T1::Rational is fine, but T1::Complex is not allowed.\n\nsignal::Vector{Vector{T2}} or signal::Vector{Vector{Array{T2,N}}}: signal[i][j] is the value of the variable at time instant timeSignal[i][j]. This value can be a scalar or an array. Type T2 can have one of the following values:\n\nT2 <: Real, must be a subtype of Real for which a conversion to AbstractFloat  is defined, or\nT2 <: Measurements.Measurement{T1}, or\nT2 <: MonteCarloMeasurements.StaticParticles{T1,N}, or\nT2 <: MonteCarloMeasurements.Particles{T1,N}.\n\nIf the signal is a constant with value value, return ([[t_min, t_max]], [[value, value]], ModiaResult.Continuous).\n\nIf the signal is the time signal, return  (timeSignal, timeSignal, ModiaResult.independent).  The timeSignal might be a dummy vector consisting of the first and last time point in the result (if different timeSignals are present for different signals or if the signal is constant).\n\nsignal and timeSignal may have units from package Unitful.\n\nThe information signalType::SignalType defines how the signal can be interpolated and/or plotted. \n\n\n\n\n\n","category":"function"},{"location":"AbstractInterface.html#ModiaResult.signalNames","page":"Abstract Interface","title":"ModiaResult.signalNames","text":"ModiaResult.signalNames(result)\n\nReturn a string vector of the signal names that are present in result.\n\n\n\n\n\n","category":"function"},{"location":"AbstractInterface.html#ModiaResult.timeSignalName","page":"Abstract Interface","title":"ModiaResult.timeSignalName","text":"ModiaResult.timeSignalName(result)\n\nReturn the name of the independent variable (typically: \"time\").\n\n\n\n\n\n","category":"function"},{"location":"AbstractInterface.html#ModiaResult.hasOneTimeSignal","page":"Abstract Interface","title":"ModiaResult.hasOneTimeSignal","text":"ModiaResult.hasOneTimeSignal(result)\n\nReturn true if result has one time signal. Return false, if result has two or more time signals.\n\n\n\n\n\n","category":"function"},{"location":"AbstractInterface.html#Optional-functions","page":"Abstract Interface","title":"Optional functions","text":"","category":"section"},{"location":"AbstractInterface.html","page":"Abstract Interface","title":"Abstract Interface","text":"The following functions can be defined for a new result data structure. If they are not defined, a default implementation is used.","category":"page"},{"location":"AbstractInterface.html","page":"Abstract Interface","title":"Abstract Interface","text":"getSignalDetails\r\nhasSignal\r\ndefaultHeading","category":"page"},{"location":"AbstractInterface.html#ModiaResult.getSignalDetails","page":"Abstract Interface","title":"ModiaResult.getSignalDetails","text":"(signal, timeSignal, timeSignalName, signalType, arrayName, \n arrayIndices, nScalarSignals) = getSignalDetails(result, name)\n\nReturn the signal defined by name::AbstractString as signal::Vector{Matrix{<:Real}}. name may include an array range, such as \"a.b.c[2:3,5]\". In this case arrayName is the name without the array indices, such as \"a.b.c\", arrayIndices is a tuple with the array indices, such as (2:3, 5) and nScalarSignals is the number of scalar signals, such as 3 if arrayIndices = (2:3, 5).  Otherwise arrayName = name, arrayIndices=(), nScalarSignals=1.\n\nIn case the signal is not known or name cannot be interpreted, (nothing, nothing, nothing, nothing, name, (), 0) is returned.\n\nIt is required that the value of the signal at a time instant  has either typeof(value) <: Real or typeof(value) = AbstractArray{Real, N}. The following Real types are currently supported:\n\nconvert(Float64, eltype(value) is supported (for example Float32, Float64, DoubleFloat, Rational, Int32, Int64, Bool).\n\nMeasurements.Measurement{<Type of (1)>}.\nMonteCarloMeasurements.StaticParticles{<Type of (1)>}.\nMonteCarloMeasurements.Particles{<Type of (1)>}.\n\n\n\n\n\n","category":"function"},{"location":"AbstractInterface.html#ModiaResult.hasSignal","page":"Abstract Interface","title":"ModiaResult.hasSignal","text":"ModiaResult.hasSignal(result, name)\n\nReturns true if signal name::AbstractString is available in result.\n\n\n\n\n\n","category":"function"},{"location":"AbstractInterface.html#ModiaResult.defaultHeading","page":"Abstract Interface","title":"ModiaResult.defaultHeading","text":"ModiaResult.defaultHeading(result)\n\nReturn default heading of result as a string  (can be used as default heading for a plot).\n\n\n\n\n\n","category":"function"},{"location":"GettingStarted.html#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"GettingStarted.html","page":"Getting Started","title":"Getting Started","text":"Note, many examples are available at $(ModiaResult.path)/test/*.jl.","category":"page"},{"location":"GettingStarted.html#Simple-plot","page":"Getting Started","title":"Simple plot","text":"","category":"section"},{"location":"GettingStarted.html","page":"Getting Started","title":"Getting Started","text":"The following example defines a simple line plot of a sine wave:","category":"page"},{"location":"GettingStarted.html","page":"Getting Started","title":"Getting Started","text":"import ModiaResult\r\n\r\n# Define plotting software globally\r\nModiaResult.usePlotPackage(\"GLMakie\") # or ENV[\"MODIA_PLOT\"] = \"GLMakie\"\r\n\r\n# Define result data structure\r\nt = range(0.0, stop=10.0, length=100)\r\nresult = Dict(\"time\" => t, \"phi\" => sin.(t))\r\n\r\n# Generate line plot\r\nModiaResult.@usingModiaPlot  # = \"using ModiaPlot_GLMakie\"\r\nplot(result, \"phi\", heading = \"Sine(time)\")","category":"page"},{"location":"GettingStarted.html","page":"Getting Started","title":"Getting Started","text":"Executing this code results in the following plot:","category":"page"},{"location":"GettingStarted.html","page":"Getting Started","title":"Getting Started","text":"(Image: SinePlot)","category":"page"},{"location":"GettingStarted.html#Plot-with-segmented-time-axes","page":"Getting Started","title":"Plot with segmented time axes","text":"","category":"section"},{"location":"GettingStarted.html","page":"Getting Started","title":"Getting Started","text":"A more complex example is shown in the next definition, where the signals have units, are scalars and vectors, have different time axes and are not always defined over the complete time range.","category":"page"},{"location":"GettingStarted.html","page":"Getting Started","title":"Getting Started","text":"import ModiaResult\r\nusing  Unitful\r\n\r\n# Define plotting software globally\r\nModiaResult.usePlotPackage(\"PyPlot\") # or ENV[\"MODIA_PLOT\"] = \"PyPlot\"\r\n\r\n# Define result data structure\r\nt0 = ([0.0, 15.0], [0.0, 15.0], ModiaResult.TimeSignal)\r\nt1 = 0.0  : 0.1 : 15.0\r\nt2 = 0.0  : 0.1 : 3.0\r\nt3 = 5.0  : 0.3 : 9.5\r\nt4 = 11.0 : 0.1 : 15.0\r\n\r\nsigA1 = 0.9*sin.(t2)u\"m\"\r\nsigA2 =     cos.(t3)u\"m\"\r\nsigA3 = 1.1*sin.(t4)u\"m\"\r\nR2    = [[0.4 * cos(t), 0.5 * sin(t), 0.3 * cos(t)] for t in t2]u\"m\"\r\nR4    = [[0.2 * cos(t), 0.3 * sin(t), 0.2 * cos(t)] for t in t4]u\"m\"\r\n\r\nsigA  = ([t2,t3,t4], [sigA1,sigA2,sigA3 ], ModiaResult.Continuous)\r\nsigB  = ([t1]      , [0.7*sin.(t1)u\"m/s\"], ModiaResult.Continuous)\r\nsigC  = ([t3]      , [sin.(t3)u\"N*m\"]    , ModiaResult.Clocked)\r\nr     = ([t2,t4]   , [R2,R4]             , ModiaResult.Continuous)\r\n    \r\nresult = ModiaResult.ResultDict(\"time\" => t0, \r\n                                \"sigA\" => sigA,\r\n                                \"sigB\" => sigB,\r\n                                \"sigC\" => sigC,\r\n                                \"r\"    => r,\r\n                                defaultHeading = \"Segmented signals\",\r\n                                hasOneTimeSignal = false) \r\n                        \r\n# Generate line plots                     \r\nModiaResult.@usingModiaPlot   # = \"using ModiaPlot_PyPlot\"\r\nplot(result, [(\"sigA\", \"sigB\", \"sigC\"), \"r[2:3]\"])","category":"page"},{"location":"GettingStarted.html","page":"Getting Started","title":"Getting Started","text":"Executing this code results in the following plot:","category":"page"},{"location":"GettingStarted.html","page":"Getting Started","title":"Getting Started","text":"(Image: SegmentedSignalsPlot)","category":"page"},{"location":"GettingStarted.html#SilentNoPlot-in-runtests","page":"Getting Started","title":"SilentNoPlot in runtests","text":"","category":"section"},{"location":"GettingStarted.html","page":"Getting Started","title":"Getting Started","text":"Typically, runtests.jl of a simulation package should utilize SilentNoPlot to perform all  tests without using a plot package:","category":"page"},{"location":"GettingStarted.html","page":"Getting Started","title":"Getting Started","text":"module Runtests   # File runtests.jl\r\n\r\nimport ModiaResult\r\nusing  Test\r\n\r\n@testset \"My Tests\" begin\r\n    ModiaResult.usePlotPackage(\"SilentNoPlot\") # stores current plot package on a stack\r\n\r\n    < run all tests >\r\n\r\n    ModiaResult.usePreviousPlotPackage() # retrieves previous plot package from stack\r\nend\r\n\r\nend","category":"page"},{"location":"Functions.html#Functions","page":"Functions","title":"Functions","text":"","category":"section"},{"location":"Functions.html","page":"Functions","title":"Functions","text":"CurrentModule = ModiaResult","category":"page"},{"location":"Functions.html","page":"Functions","title":"Functions","text":"This chapter documents the functions that a user of this package typically utilizes.","category":"page"},{"location":"Functions.html","page":"Functions","title":"Functions","text":"The following functions are available when prefixed with ModiaResult.","category":"page"},{"location":"Functions.html","page":"Functions","title":"Functions","text":"note: Note\nModiaResult does not export any symbols.\n(for example: import ModiaResult; ModiaResult.usePlotPackage(\"PyPlot\")).Some packages, such as Modia, export all the function names below and then the functions can be directly accessed.\n(for example: using Modia; usePlotPackage(\"PyPlot\")).","category":"page"},{"location":"Functions.html","page":"Functions","title":"Functions","text":"Functions Description\n@usingModiaPlot Expands into using ModiaPlot_<PlotPackageName>\nusePlotPackage Define the plot package to be used.\nusePreviousPlotPackage Define the previously defined plot package to be used.\ncurrentPlotPackage Return name defined with usePlotPackage\nresultInfo Return info about the result as DataFrame table\nprintResultInfo Print info of the result on stdout.\nrawSignal Return raw signal data given the signal name.\ngetPlotSignal Return signal data prepared for a plot package.\ndefaultHeading Return default heading of a result.\nsignalNames Return all signal names.\ntimeSignalName Return the name of the time signal.\nhasOneTimeSignal Return true if one time signal present.\nhasSignal Return true if a signal name is known.","category":"page"},{"location":"Functions.html","page":"Functions","title":"Functions","text":"The following functions are available after @usingModiaPlot has been executed:","category":"page"},{"location":"Functions.html","page":"Functions","title":"Functions","text":"CurrentModule = ModiaPlot_PyPlot","category":"page"},{"location":"Functions.html","page":"Functions","title":"Functions","text":"Functions Description\nplot Plot simulation results in multiple diagrams/figures.\nsaveFigure Save figure in different formats on file.\ncloseFigure Close one figure\ncloseAllFigures Close all figures\nshowFigure Show figure in window (only GLMakie, WGLMakie)","category":"page"},{"location":"Functions.html","page":"Functions","title":"Functions","text":"CurrentModule = ModiaResult","category":"page"},{"location":"Functions.html","page":"Functions","title":"Functions","text":"The following function is typically only used for testing","category":"page"},{"location":"Functions.html","page":"Functions","title":"Functions","text":"Functions Description\nModiaResult.ResultDict Return a new instance of a ResultDict dictionary.","category":"page"},{"location":"Functions.html#Functions-of-ModiaResult","page":"Functions","title":"Functions of ModiaResult","text":"","category":"section"},{"location":"Functions.html","page":"Functions","title":"Functions","text":"The following functions are provided by package ModiaResult. Other useful functions are available in the Abstract Interface.","category":"page"},{"location":"Functions.html","page":"Functions","title":"Functions","text":"@usingModiaPlot\r\nusePlotPackage\r\nusePreviousPlotPackage\r\ncurrentPlotPackage\r\nresultInfo\r\nprintResultInfo\r\ngetPlotSignal","category":"page"},{"location":"Functions.html#ModiaResult.@usingModiaPlot","page":"Functions","title":"ModiaResult.@usingModiaPlot","text":"@usingModiaPlot()\n\nExecute using XXX, where XXX is the ModiaPlot package that was activated with usePlotPackage(plotPackage).\n\n\n\n\n\n","category":"macro"},{"location":"Functions.html#ModiaResult.usePlotPackage","page":"Functions","title":"ModiaResult.usePlotPackage","text":"usePlotPackage(plotPackage::String)\n\nDefine the ModiaPlot package that shall be used by command ModiaResult.@usingModiaPlot. If a ModiaPlot package is already defined, save it on an internal stack (can be reactivated with usePreviousPlotPackage().\n\nPossible values for plotPackage:\n\n\"GLMakie\"\n\"WGLMakie\"\n\"CairoMakie\"\n\"PyPlot\"\n\"NoPlot\"\n\"SilentNoPlot\"\n\nExample\n\nimport ModiaResult\n\nModiaResult.usePlotPackage(\"GLMakie\")\n\nmodule MyTest\n    ModiaResult.@usingModiaPlot\n\n    t = range(0.0, stop=10.0, length=100)\n    result = Dict{String,Any}(\"time\" => t, \"phi\" => sin.(t))\n\n    plot(result, \"phi\")  # use GLMakie for the rendering\nend\n\n\n\n\n\n","category":"function"},{"location":"Functions.html#ModiaResult.usePreviousPlotPackage","page":"Functions","title":"ModiaResult.usePreviousPlotPackage","text":"usePreviousPlotPackage()\n\nPop the last saved ModiaPlot package from an internal stack and call usePlotPackage(<popped ModiaPlot package>).\n\n\n\n\n\n","category":"function"},{"location":"Functions.html#ModiaResult.currentPlotPackage","page":"Functions","title":"ModiaResult.currentPlotPackage","text":"currentPlotPackage()\n\nReturn the name of the plot package as a string that was defined with usePlotPackage. For example, the function may return \"GLMakie\", \"PyPlot\" or \"NoPlot\" or or \"\", if no PlotPackage is defined.\n\n\n\n\n\n","category":"function"},{"location":"Functions.html#ModiaResult.resultInfo","page":"Functions","title":"ModiaResult.resultInfo","text":"resultInfo(result)\n\nReturn information about the result as DataFrames.DataFrame object with columns:\n\nname::String, unit::String, nTime::String, signalType::String, valueSize::String, eltype::String\n\n\n\n\n\n","category":"function"},{"location":"Functions.html#ModiaResult.printResultInfo","page":"Functions","title":"ModiaResult.printResultInfo","text":"printResultInfo(result)\n\nPrint info about result.\n\nExample\n\nusing ModiaResult\nusing Unitful\nModiaResult.@usingModiaPlot\n\nt = range(0.0, stop=10.0, length=100)\nresult = OrderedDict{String,Any}(\"time\"=> t*u\"s\", \"phi\" => sin.(t)*u\"rad\")\nprintResultInfo(result)\n\n# Gives output:\n # │ name  unit  nTime  signalType  valueSize  eltype  \n───┼───────────────────────────────────────────────────\n 1 │ time  s     100    Independent ()         Float64\n 2 │ phi   rad   100    Continuous  ()         Float64\n\n\n\n\n\n","category":"function"},{"location":"Functions.html#ModiaResult.getPlotSignal","page":"Functions","title":"ModiaResult.getPlotSignal","text":"(xsig, xsigLegend, ysig, ysigLegend, ysigType) = getPlotSignal(result, ysigName; xsigName=nothing)\n\nGiven the result data structure result and a variable ysigName::AbstractString with or without array range indices (for example ysigName = \"a.b.c[2,3:5]\") and an optional variable name xsigName::AbstractString for the x-axis, return \n\nxsig::Vector{T1<:Real}: The vector of the x-axis signal without a unit. Segments are concatenated  and separated by NaN.\nxsigLegend::AbstractString: The legend of the x-axis consisting of the x-axis name and its unit (if available).\nysig::Vector{T2} or ::Matrix{T2}: the y-axis signal, either as a vector or as a matrix of values without units depending on the given name. For example, if ysigName = \"a.b.c[2,3:5]\", then ysig consists of a matrix with three columns corresponding to the variable values of \"a.b.c[2,3]\", \"a.b.c[2,4]\", \"a.b.c[2,5]\" with the (potential) units are stripped off. Segments are concatenated and separated by NaN.\nysigLegend::Vector{AbstractString}: The legend of the y-axis as a vector of strings, where ysigLegend[1] is the legend for ysig, if ysig is a vector, and ysigLegend[i] is the legend for the i-th column of ysig, if ysig is a matrix. For example, if variable \"a.b.c\" has unit m/s, then ysigName = \"a.b.c[2,3:5]\" results in ysigLegend = [\"a.b.c[2,3] [m/s]\", \"a.b.c[2,3] [m/s]\", \"a.b.c[2,5] [m/s]\"].\nysigType::SignalType: The signal type of ysig (either ModiaResult.Continuous or ModiaResult.Clocked).\n\nIf ysigName is not valid, or no signal values are available, the function returns  (nothing, nothing, nothing, nothing, nothing), and prints a warning message.\n\n\n\n\n\n","category":"function"},{"location":"Functions.html#Functions-of-Plot-Package","page":"Functions","title":"Functions of Plot Package","text":"","category":"section"},{"location":"Functions.html","page":"Functions","title":"Functions","text":"The following functions are available after","category":"page"},{"location":"Functions.html","page":"Functions","title":"Functions","text":"ModiaResult.@usingModiaPlot","category":"page"},{"location":"Functions.html","page":"Functions","title":"Functions","text":"has been executed. The documentation below was generated with ModiaPlot_PyPlot.","category":"page"},{"location":"Functions.html","page":"Functions","title":"Functions","text":"CurrentModule = ModiaPlot_PyPlot","category":"page"},{"location":"Functions.html","page":"Functions","title":"Functions","text":"plot\r\nsaveFigure\r\ncloseFigure\r\ncloseAllFigures\r\nshowFigure","category":"page"},{"location":"Functions.html#ModiaPlot_PyPlot.plot","page":"Functions","title":"ModiaPlot_PyPlot.plot","text":"plot(result, names; \n     heading = \"\", grid = true, xAxis = nothing,\n     figure = 1, prefix = \"\", reuse = false, maxLegend = 10,\n     minXaxisTickLabels = false,\n     MonteCarloAsArea = true)\n\nGenerate line plots of the signals of the result data structure that are identified with the names keys using the plot package defined with ModiaResult.@usePlotPackage(xxx). Possible values for xxx: \"GLMakie\", \"WGLMakie\", \"CairoMakie\", \"PyPlot\", \"NoPlot\", \"SilentNoPlot\").\n\nresult is any data structures that supports the abstract interface of ModiaResult.  Currently these are:\n\nresult::ModiaResult.ResultDict\nresult::AbstractDict{String,T}\nresult::DataFrames.DataFrame\nresult supports the Tables.jl interface with Tables.columnaccess(result) = true.\n\nArgument names defines the diagrams to be drawn and the result data to be included in the respective diagram:\n\nIf names is a String, generate one diagram with one time series of the variable with key names.\nIf names is a Tuple of Strings, generate one diagram with the time series of the variables with the keys given in the tuple.\nIf names is a Vector or a Matrix of Strings and/or Tuples,  generate a vector or matrix of diagrams.\n\nNote, the names (and their units, if available in the result) are automatically used as legends in the respective diagram.\n\nA signal variable identified by a String key can be a scalar of type <:Number or an array of element type <:Number. A signal is defined by a vector of time values, a corresponding vector of signal values, and the signal type (continuous or clocked).\n\nNote, before passing data to the plot package, it is converted to Float64. This allows to, for example, also plot rational numbers, even if not supported by the plot package. Measurements.Measurement{xxx}  and MonteCarloMeasurements is specially handled.\n\nOptional Arguments\n\nheading::AbstractString: Optional heading above the diagram.\ngrid::Bool: = true, to display a grid.\nxAxis::Union{AbstractString,Nothing}: Name of x-axis. If xAxis=nothing, the independent variable of the result (usually \"time\" is used as x-axis.\nfigure::Int: Integer identifier of the window in which the diagrams shall be drawn.\nprefix::AbstractString: String that is appended in front of every legend label  (useful especially if reuse=true).\nreuse::Bool: If figure already exists and reuse=false, clear the figure before adding the plot.  Otherwise, include the plot in the existing figure without removing the curves present in the figure.  reuse = true is ignored for \"WGLMakie\" (because not supported).\nmaxLegend::Int: If the number of legend entries in one plot command > maxLegend,  the legend is suppressed. All curves have still their names as labels. In PyPlot, the curves can be inspected by  their names by clicking in the toolbar of the plot on button Edit axis, curve ..  and then on Curves.\nminXaxisTickLabels::Bool: = true, if xaxis tick labels shall be removed in a vector or array of plots, if not the last row (useful when including plots in a document). = false, x axis tick labels are always shown (useful when interactively zooming into a plot).\nMonteCarloAsArea::Bool: = true, if MonteCarloMeasurements values are shown with the mean value and the area between the minimum and the maximum value of all particles. = false, if all particles of MonteCarloMeasurements values are shown (e.g. if a value has 2000 particles, then 2000 curves are shown in the diagram).\n\nExamples\n\nimport ModiaResult\nusing  Unitful\n\n# Generate \"using xxx\" statement \n# (where \"xxx\" is from a previous ModiaResult.usePlotPackage(\"xxx\"))\nModiaResult.@usingModiaPlot\n\n# Construct result data\nt = range(0.0, stop=10.0, length=100);\nresult = Dict{String,Any}();\nresult[\"time\"] = t*u\"s\";\nresult[\"phi\"]  = sin.(t)*u\"rad\";\nresult[\"w\"]    = cos.(t)*u\"rad/s\";\nresult[\"a\"]    = 1.2*sin.(t)*u\"rad/s^2\";\nresult[\"r\"]    = hcat(0.4 * cos.(t), 0.5 * sin.(t), 0.3*cos.(t))*u\"m\";\n\n# 1 signal in one diagram (legend = \"phi [rad]\")\nplot(result, \"phi\")\n\n# 3 signals in one diagram\nplot(result, (\"phi\", \"w\", \"a\"), figure=2)\n\n# 3 diagrams in form of a vector (every diagram has one signal)\nplot(result, [\"phi\", \"w\", \"r\"], figure=3)\n\n# 4 diagrams in form of a matrix (every diagram has one signal)\nplot(result, [\"phi\" \"w\";\n              \"a\"   \"r[2]\" ], figure=4)\n\n# 2 diagrams in form of a vector\nplot(result, [ (\"phi\", \"w\"), (\"a\") ], figure=5)\n\n# 4 diagrams in form of a matrix\nplot(result, [ (\"phi\",)           (\"phi\", \"w\");\n               (\"phi\", \"w\", \"a\")  (\"r[2:3]\",)     ],figure=6)\n\n# Plot w=f(phi) in one diagram\nplot(result, \"w\", xAxis=\"phi\", figure=7)\n\n# Append signal of the next simulation run to figure=1\n# (legend = \"Sim 2: phi [rad]\")\nresult[\"phi\"] = 0.5*result[\"phi\"];\nplot(result, \"phi\", prefix=\"Sim 2: \", reuse=true)\n\nExample of a matrix of plots:\n\n(Image: Matrix of plots)\n\n\n\n\n\n","category":"function"},{"location":"Functions.html#ModiaPlot_PyPlot.saveFigure","page":"Functions","title":"ModiaPlot_PyPlot.saveFigure","text":"saveFigure(figure, file; kwargs...)\n\nSave figure on file. The file extension defines the image format (for example *.png).\n\nPlot package Supported file extensions\nGLMakie png, jpg, bmp\nWGLMakie png\nCairoMakie png, pdf, svg, eps\nPyPlot depends on backend (png, pdf, jpg, tiff, svg, ps, eps)\nNoPlot Call is ignored\n\nKeyword arguments\n\nresolution: (width::Int, height::Int) of the scene in dimensionless  units (equivalent to px for GLMakie and WGLMakie).\n\nExample\n\nimport ModiaResult\nModiaResult.@usingModiaPlot\n...\n\nplot(..., figure=1)\nplot(..., figure=2)\n\nsaveFigure(1, \"plot.png\")   # save in png-format\nsaveFigure(2, \"plot.svg\")   # save in svg-format\n\n\n\n\n\n","category":"function"},{"location":"Functions.html#ModiaPlot_PyPlot.closeFigure","page":"Functions","title":"ModiaPlot_PyPlot.closeFigure","text":"closeFigure(figure)\n\nClose figure.\n\n\n\n\n\n","category":"function"},{"location":"Functions.html#ModiaPlot_PyPlot.closeAllFigures","page":"Functions","title":"ModiaPlot_PyPlot.closeAllFigures","text":"closeAllFigures()\n\nClose all figures.\n\n\n\n\n\n","category":"function"},{"location":"Functions.html#ModiaPlot_PyPlot.showFigure","page":"Functions","title":"ModiaPlot_PyPlot.showFigure","text":"showFigure(figure)\n\nPlot package Effect\nGLMakie Show figure in the single window.\nWGLMakie Show figure in the single window.\nCairoMakie Call is ignored\nPyPlot Call is ignored\nNoPlot Call is ignored\n\nExample\n\nimport ModiaResult\nModiaResult.@usingModiaPlot\n...\nplot(..., figure=1)\nplot(..., figure=2)\nplot(..., figure=3)\n\nshowFigure(2)\nshowFigure(1)\n\n\n\n\n\n","category":"function"},{"location":"Functions.html#Functions-for-Testing","page":"Functions","title":"Functions for Testing","text":"","category":"section"},{"location":"Functions.html","page":"Functions","title":"Functions","text":"CurrentModule = ModiaResult","category":"page"},{"location":"Functions.html","page":"Functions","title":"Functions","text":"ResultDict","category":"page"},{"location":"Functions.html#ModiaResult.ResultDict","page":"Functions","title":"ModiaResult.ResultDict","text":"ResultDict(args...; defaultHeading=\"\", hasOneTimeSignal=true)\n\nReturn a new ResultDict dictionary (is based on DataStructures.OrderedDict).\n\nA key of the dictionary is a String. Key \"time\" characterizes the independent variable.\nA value of the dictionary is a tuple (timeSignal, signal, signalType) where timeSignal::Vector{AbstractVector}, signal::Vector{AbstractVector} and signalType::ModiaResult.SignalType.signal[i][j]is the signalValue at time instanttimeSignal[i][j]in segmenti`.\n\nExample\n\nusing ModiaResult\n\ntime0 = [0.0, 7.0]\nt     = ([time0], [time0], ModiaResult.Independent)\n\ntime1 = 0.0 : 0.1  : 2.0\ntime2 = 3.0 : 0.01 : 3.5\ntime3 = 5.0 : 0.1  : 7.0\nsigA1 = sin.(time1)u\"m\"\nsigA2 = cos.(time2)u\"m\"\nsigA3 = sin.(time3)u\"m\"\nsigA  = ([time1, time2, time3], \n         [sigA1, sigA2, sigA3 ], \n         ModiaResult.SignalType)\nsigB  = ([time2], [sin.(time2)], ModiaResult.SignalType)\nsigC  = ([time3], [sin.(time3)], ModiaResult.Clocked)    \n    \nresult = ModiaResult.ResultDict(\"time\" => t, \n                                \"sigA\" => sigA,\n                                \"sigB\" => sigB,\n                                \"sigC\" => sigC,\n                                defaultHeading = \"Three test signals\",\n                                hasOneTimeSignal = false)\nshowInfo(result)\n\n\n\n\n\n","category":"type"},{"location":"index.html#ModiaResult-Documentation","page":"Home","title":"ModiaResult Documentation","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"CurrentModule = ModiaResult","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Package ModiaResult defines  an abstract interface for simulation results and provides overloaded methods for:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Dictionaries with String keys,","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"DataFrame tables, ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Tables (for example CSV), and","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"ModiaResult.ResultDict (special dictionary with all features of the interface). ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Additionally, operations on simulation results are provided, especially to produce line plots in a convenient way based on ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"GLMakie (interactive plots in an OpenGL window),\nWGLMakie (interactive plots in a browser window),\nCairoMakie (static plots on file with publication quality),\nPyPlot (plots with Matplotlib from Python), \nNoPlot (= all plot calls are ignored; NoPlot is a module in ModiaResult), or\nSilentNoPlot (= NoPlot without messages; SilentNoPlot is a module in ModiaResult).","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"More details:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Getting Started\nFunctions\nAbstract Interface\nInternal","category":"page"},{"location":"index.html#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"All packages are registered and are installed with:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"julia> ]add ModiaResult\r\n        add ModiaPlot_GLMakie       # if plotting with GLMakie desired\r\n        add ModiaPlot_WGLMakie      # if plotting with WGLMakie desired\r\n        add ModiaPlot_CairoMakie    # if plotting with CairoMakie desired\r\n        add ModiaPlot_PyPlot        # if plotting with PyPlot desired","category":"page"},{"location":"index.html#Installation-of-PyPlot.jl","page":"Home","title":"Installation of PyPlot.jl","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"ModiaPlot_PyPlot.jl uses PyPlot.jl which in turn uses Python.  Therefore a Python installation is needed. Installation  might give problems in some cases. Here are some hints what to do (you may also consult the documentation of PyPlot.jl).","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Before installing ModiaPlot_PyPlot.jl make sure that PyPlot.jl is working:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"]add PyPlot\r\nusing PyPlot\r\nt = [0,1,2,3,4]\r\nplot(t,2*t)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"If the commands above give a plot window. Everything is fine.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"If you get errors or no plot window appears or Julia crashes,  try to first install a standard Python installation from Julia:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"# Start a new Julia session\r\nENV[\"PYTHON\"] = \"\"    # Let Julia install Python\r\n]build PyCall\r\nexit()   # Exit Juila\r\n\r\n# Start a new Julia session\r\n]add PyPlot\r\nusing PyPlot\r\nt = [0,1,2,3,4]\r\nplot(t,2*t)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"If the above does not work, or you want to use another Python distribution, you might utilize the following approach.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Install a Python 3.x distribution that contains Matplotlib.\nRecommended: Anaconda distribution.\nAdvantage: very robust;\nDisadvantage: > 3 GByte memory needed;\nModiaPlot_PyPlot is based on the Python 3.x version of Matplotlib where some keywords are different to the Python 2.x version.\nOn Windows 10, either provide a julia_start.bat file with the following content (and add <path-to-julia-installation>\\bin to the path environment variable):\ncall <path-to-Anaconda3>\\Anaconda3\\Scripts\\activate.bat\r\njulia\nand always start julia by calling julia_start,\nor you could add the following directories to the path environment variable:\n<path-to-Anaconda3>\\Anaconda3\r\n<path-to-Anaconda3>\\Anaconda3\\Library\\mingw-w64\\bin\r\n<path-to-Anaconda3>\\Anaconda3\\Library\\usr\\bin\r\n<path-to-Anaconda3>\\Anaconda3\\Library\\bin\r\n<path-to-Anaconda3>\\Anaconda3\\Scripts\r\n<path-to-Anaconda3>\\Anaconda3\\bin\r\n<path-to-Anaconda3>\\Anaconda3\\condabin\nand start julia by calling julia\nInclude the path to the Python executable in your startup file\n(<path-to-user>/.julia/config/startup.jl):\n ENV[\"PYTHON\"] = \"<path-above-Anaconda3>/Anaconda3/python.exe\".\nStart Julia, give the command ENV[\"PYTHON\"] in the REPL, and check whether the path is correct (if you made a typo in the startup file, Julia might use another Python executable and PyPlot might crash Julia).\nIf you have used a different Python installation before, execute the command ]build PyCall (or using Pkg; Pkg.build(\"PyCall\"), exit Julia and start Julia again.\nInstall PyPlot via ]add PyPlot (or using Pkg; Pkg.add(\"PyPlot\"))","category":"page"},{"location":"index.html#Release-Notes","page":"Home","title":"Release Notes","text":"","category":"section"},{"location":"index.html#Version-0.3.1","page":"Home","title":"Version 0.3.1","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Two new views on results added (SignalView and FlattenedSignalView).","category":"page"},{"location":"index.html#Version-0.3","page":"Home","title":"Version 0.3","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Major clean-up of the function interfaces. This version is not backwards compatible to previous versions.","category":"page"},{"location":"index.html#Version-0.2.2","page":"Home","title":"Version 0.2.2","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Overloaded AstractDicts generalized from AbstractDict{String,T} where {T} to\nAbstractDict{T1,T2} where {T1<:AbstractString,T2}.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Bug fixed.","category":"page"},{"location":"index.html#Version-0.2.1","page":"Home","title":"Version 0.2.1","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Bug fixed: <: Vector changed to <: AbstractVector","category":"page"},{"location":"index.html#Version-0.2.0","page":"Home","title":"Version 0.2.0","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Abstract Interface slightly redesigned (therefore 0.2.0 is not backwards compatible to 0.1.0).","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Modules NoPlot and SilentNoPlot added as sub-modules of ModiaResult. These modules are activated if plot package \"NoPlot\" or \"SilentNoPlot\" are selected.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Content of directory srcplot moved into src. Afterwards srcplot was removed.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Directory test_plot merged into test (and then removed).","category":"page"},{"location":"index.html#Version-0.1.0","page":"Home","title":"Version 0.1.0","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Initial version (based on the result plotting developed for ModiaMath).","category":"page"},{"location":"index.html#Main-developer","page":"Home","title":"Main developer","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Martin Otter, DLR - Institute of System Dynamics and Control","category":"page"}]
}
